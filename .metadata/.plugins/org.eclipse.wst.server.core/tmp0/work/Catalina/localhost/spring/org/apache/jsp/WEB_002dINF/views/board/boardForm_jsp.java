/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.44
 * Generated at: 2021-05-26 08:12:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1621235338534L));
    _jspx_dependants.put("jar:file:/C:/Workspaces/spring_workspace/hello-spring/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fn.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("jar:file:/C:/Workspaces/spring_workspace/hello-spring/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("jar:file:/C:/Workspaces/spring_workspace/hello-spring/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fmt.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("게시글 작성", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("div#board-container{width:400px; margin:0 auto; text-align:center;}\r\n");
      out.write("div#board-container input{margin-bottom:15px;}\r\n");
      out.write("/* 부트스트랩 : 파일라벨명 정렬*/\r\n");
      out.write("div#board-container label.custom-file-label{text-align:left;}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("/* textarea에도 required속성을 적용가능하지만, 공백이 입력된 경우 대비 유효성검사를 실시함. */\r\n");
      out.write("function boardValidate(){\r\n");
      out.write("\tvar $content = $(\"[name=content]\");\r\n");
      out.write("\tif(/^(.|\\n)+$/.test($content.val()) == false){\r\n");
      out.write("\t\talert(\"내용을 입력하세요\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(() => {\r\n");
      out.write("\t$(\"[name=upFile]\").change(e => {\r\n");
      out.write("\t\t//파일명 가져오기\r\n");
      out.write("\t\tvar file = $(e.target).prop('files')[0]; //javascript객체 \r\n");
      out.write("\t\t//var file = $(e.target).prop('files'); \r\n");
      out.write("\t\tconsole.log(file);\r\n");
      out.write("\t\t//console.log(files[0]);\r\n");
      out.write("\t\tvar $label = $(e.target).next();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//label 적용\r\n");
      out.write("\t\t//$label.html(file.length > 1 ? file[0].name + \" 외 \" + (file.length - 1) + \"개\"  : \"파일을 선택하세요.\");\t\t\r\n");
      out.write("\t\t$label.html(file ? file.name : \"파일을 선택하세요.\");\t\t\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<div id=\"board-container\">\r\n");
      out.write("\t<form name=\"boardFrm\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/boardEnroll.do\" method=\"post\" onsubmit=\"return boardValidate();\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t\t<input type=\"text\" class=\"form-control\" placeholder=\"제목\" name=\"title\" id=\"title\" required>\r\n");
      out.write("\t\t<input type=\"text\" class=\"form-control\" name=\"memberId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly required>\r\n");
      out.write("\t\t<!-- input:file소스 : https://getbootstrap.com/docs/4.1/components/input-group/#custom-file-input -->\r\n");
      out.write("\t\t<div class=\"input-group mb-3\" style=\"padding:0px;\">\r\n");
      out.write("\t\t  <div class=\"input-group-prepend\" style=\"padding:0px;\">\r\n");
      out.write("\t\t    <span class=\"input-group-text\">첨부파일1</span>\r\n");
      out.write("\t\t  </div>\r\n");
      out.write("\t\t  <div class=\"custom-file\">\r\n");
      out.write("\t\t    <input type=\"file\" class=\"custom-file-input\" name=\"upFile\" id=\"upFile1\" multiple>\r\n");
      out.write("\t\t    <label class=\"custom-file-label\" for=\"upFile1\">파일을 선택하세요</label>\r\n");
      out.write("\t\t  </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"input-group mb-3\" style=\"padding:0px;\">\r\n");
      out.write("\t\t  <div class=\"input-group-prepend\" style=\"padding:0px;\">\r\n");
      out.write("\t\t    <span class=\"input-group-text\">첨부파일2</span>\r\n");
      out.write("\t\t  </div>\r\n");
      out.write("\t\t  <div class=\"custom-file\">\r\n");
      out.write("\t\t    <input type=\"file\" class=\"custom-file-input\" name=\"upFile\" id=\"upFile2\" >\r\n");
      out.write("\t\t    <label class=\"custom-file-label\" for=\"upFile2\">파일을 선택하세요</label>\r\n");
      out.write("\t\t  </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t    <textarea class=\"form-control\" name=\"content\" placeholder=\"내용\" required></textarea>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"submit\" class=\"btn btn-outline-success\" value=\"저장\" >\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("</div>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/footer.jsp", out, false);
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
